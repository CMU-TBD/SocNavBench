[socnav_params]
seed = 991 ; Explicit seed for randomness generation
dataset_dir=agents/humans/datasets/ ; Directory for pedestrian datasets

[simulator_params]
dt=0.05 ; Simulator refresh rate to be used throughout SocNavBench
# whether or not to use threading to update through all pedestrians in parallel
# NOTE: due to the GIL there is no performance improvement, in fact running 
# sequentially is usually faster as there is no thread overhead
use_multithreading=False
keep_episode_running=True ; continue the episode even if the robot collides with a pedestrian (not an obstacle)
# synchronicity mode for the simulator, either the simulator can wait for the
# joystick in which case "thinking" is free, or the simulator can run in realtime
synchronous_mode=synchronous ; or asynchronous
delta_t_scale=1 ; Simulation tick rate multiplier (based off the dt found in [dynamics_params])
verbose_printing=False ; Include debug prints

[agent_params]
radius=0.2 ; Radius of default agents (in meters)
episode_horizon=200 ; Depth of the planning tree, number of iterations the sub-trajectory has
control_horizon_s=0.5 ; Time spent between sense and act calls 
collision_cooldown_amnt = 1.0 ; Minimum time (simulator seconds) between subsequent collisions
pause_on_collide=False ; Whether or not to have agents pause motion upon collision with robot

[robot_params]
# Local socket identification for the robot<->joystick communication
recv_ID = /tmp/socnavbench_joystick_recv
send_ID = /tmp/socnavbench_joystick_send
max_repeats=50 ; Max repeats of the last command if in asynchronous mode and no joystick command is received
# Physical params
# The default robot is based off a Pioneer 3-DX robot
# more info here: https://www.generationrobots.com/media/Pioneer3DX-P3DX-RevA.pdf
radius_cm=24 ; radius of the base of the robot
distance_from_ground_cm=5 ; height of the robot base from the ground
chassis_height_cm=100 ; height of the entire chassis
sensor_height_cm=80 ; height of the sensor
camera_elevation_degree=-45 ; camera tilt
delta_theta=1.0

[joystick_params]
dt=0.05 ; joystick refresh rate (independent of the simulator)
use_system_dynamics=False ; Whether or not to use our system dynamics or just positional args
use_random_planner=False ; Whether or not to use a simple random planner
episode_horizon=200 ; Depth of the planning tree, number of iterations the sub-trajectory has
control_horizon_s=0.5 ; Time spent between joystick sense() calls
track_vel_accel=False ; whether or not to track the velocities & accelerations
track_sim_states=True ; whether or not to track the SimStates
write_pandas_log=True ; whether or not to write a log of the agents
print_data=False ; Print the sent data:
verbose = False ; other prints

[human_render_params] ; NOTE: this is only for the schematic rendering, done with matplotlib
# NOTE: to see the logic behind using these mpl kwargs, see sim_state.py:AgentState:render
body_normal_mpl_kwargs={
		"color" : 'c', "marker" : 'o', "markersize" : 10,
		"label" : "Pedestrian", "alpha" : 1.0, "zorder" : 2,
	}
body_collision_mpl_kwargs={
		"color" : 'r', "marker" : 'o', "markersize" : 10,
		"label" : None,  "alpha" : 1.0, "zorder" : 2,
	}
# the mini-dot gets drawn atop the agent only when in collision state
collision_mini_dot_mpl_kwargs={
		"color" : 'c', "marker" : 'o', "markersize" : 4,
		"label" : None,  "alpha" : 1.0, "zorder" : 3,
	}
traj_mpl_kwargs={
		"color" : 'c', "alpha" : 0.2, "linestyle" : "-",
		"linewidth" : 3, "zorder" : 1,
	}
start_mpl_kwargs={
		"color" : 'y', "marker" : 'o', "markersize" : 10,
		"label" : "Human Start", "alpha" : 1.0, "zorder" : 1,
	}
goal_mpl_kwargs={
		"color" : 'g', "marker" : '*', "markersize" : 10,
		"label" : "Human Goal", "alpha" : 1.0, "zorder" : 1,
	}
traj_freq=1
plot_trajectory=True ; whether or not to plot trajectory
max_traj_length=50 ; maximum number of points used for rendering
plot_start=False ; whether or not to plot the start position
plot_goal=False ; whether or not to plot the goal position
plot_quiver=True ; whether or not to plot the quiver on the agent

[robot_render_params] ; same as human render params
body_normal_mpl_kwargs={
		"color" : 'r', "marker" : 'o', "markersize" : 12,
		"label" : "Robot", "alpha" : 1.0, "zorder" : 2,
	}
collision_mini_dot_mpl_kwargs={
		"color" : 'r', "marker" : 'o', "markersize" : 4,
		"label" : None,  "alpha" : 1.0, "zorder" : 3,
	}
traj_mpl_kwargs={
		"color" : "w", "alpha" : 1.0, "linestyle" : ":",
		"linewidth" : 6, "zorder" : 1,
	}
start_mpl_kwargs={
		"color" : 'y', "marker" : 'o', "markersize" : 12,
		"label" : "Robot Start", "alpha" : 1.0, "zorder" : 1,
	}
goal_mpl_kwargs={
		"color" : 'g', "marker" : '*', "markersize" : 15,
		"label" : "Robot Goal", "alpha" : 1.0, "zorder" : 1,
	}
traj_freq=1
plot_trajectory=True
max_traj_length=0 ; full trajectory, if you don't want to draw trajectory then set plot_trajectory to False
plot_start=True
plot_goal=True
plot_quiver=True

[renderer_params]
render_movie=True ; whether or not to skip rendering the movie
img_scale=1 ; Simulation frame image scalar
num_procs=8 ; number of cores to use in parallel rendering (1 is singlethreaded)
clear_files=False ; clear files (of individual frames) when finish rendering
plot_meter_tick=False ; whether or not to plot the small tick for a meter
plot_meter_quiver=False ; whether or not to plot the meter tick quiver
legend_loc="upper right" ; preferred legend placement (see matplotlib legend doc)
# Depending on system, those equipped with an X graphical
# instance (or other display) can set this full-render to use 
# the SwiftShader renderer and render the 3D humans/scene
# NOTE: concurrent openGL rendering is currently unsupported
# and is thus very slow, schematic is much faster
render_mode=schematic ; or full-render
draw_human_traversible=True ; whether or not to draw the human traversibles (in full-render mode)
# instead of drawing parallel robots during other scenarios, you should use test_multi_render.py
draw_parallel_robots=False ; whether or not to draw the following parallel variant robots
# NOTE: the following params only matter when draw_parallel_robots is True, for rendering historical robot data on the scene
draw_mark_of_shame=True ; draw a persistent "mark of shame" on robots who collided with pedestrians
draw_parallel_robots_params_by_algo={ ; draw's robots from other parallel dimensions at this time
	"SamplingPlanner": {
			"body_kwargs": {
				"color" : 'dimgray', "marker" : 'o', "markersize" : 12,
				"label" : "Ped Unaware Robot", "alpha" : 1.0, "zorder" : 2,
			},
			"traj_kwargs": {
				"color" : "gray", "alpha" : 1.0, "linestyle" : ":",
				"linewidth" : 6, "zorder" : 1,
			},
		},
	"RVO": {
			"body_kwargs": {
				"color" : 'orange', "marker" : 'X', "markersize" : 12,
				"label" : "RVO Robot", "alpha" : 1.0, "zorder" : 2,
			},
			"traj_kwargs": {
				"color" : "bisque", "alpha" : 1.0, "linestyle" : ":",
				"linewidth" : 6, "zorder" : 1,
			},
		},
	"RVO_w_ckpt": {
			"body_kwargs": {
				"color" : 'gold', "marker" : 'x', "markersize" : 12,
				"label" : "RVOwCkpt Robot", "alpha" : 1.0, "zorder" : 2,
			},
			"traj_kwargs": {
				"color" : "lemonchiffon", "alpha" : 1.0, "linestyle" : ":",
				"linewidth" : 6, "zorder" : 1,
			},
		},
	"sacadrl": {
			"body_kwargs": {
				"color" : 'royalblue', "marker" : 's', "markersize" : 12,
				"label" : "Sacadrl Robot", "alpha" : 1.0, "zorder" : 2,
			},
			"traj_kwargs": {
				"color" : "cornflowerblue", "alpha" : 1.0, "linestyle" : ":",
				"linewidth" : 6, "zorder" : 1,
			},
		},
	"sacadrl_w_ckpt": {
			"body_kwargs": {
				"color" : 'purple', "marker" : 'P', "markersize" : 10,
				"label" : "SacadrlwCkpt Robot", "alpha" : 1.0, "zorder" : 2,
			},
			"traj_kwargs": {
				"color" : "violet", "alpha" : 1.0, "linestyle" : ":",
				"linewidth" : 6, "zorder" : 1,
			},
		},
	"social_force": {
			"body_kwargs": {
				"color" : 'green', "marker" : 'D', "markersize" : 10,
				"label" : "SocialForces Robot", "alpha" : 1.0, "zorder" : 2,
			},
			"traj_kwargs": {
				"color" : "lightgreen", "alpha" : 1.0, "linestyle" : ":",
				"linewidth" : 6, "zorder" : 1,
			},
		},
	}

[waypoint_params]
# Parameters for the projected image space grid
# Desired number of waypoints. Actual number may differ slightly
# See ./waypoint_grids/uniform_sampling_grid.py for more info
num_waypoints=20000
num_theta_bins=21
bound_min=[0.0, -2.5, -3.141592]
bound_max=[2.5, 2.5, 0.0]

[dynamics_params]
v_bounds=[0.0, 1.2] ; velocity bounds
w_bounds=[-1.1, 1.1] ; omega bounds

[control_pipeline_params]
# Spline params
max_final_time=4.0 ; maximum planning time (depth) in seconds
minimum_spline_horizon=1.5 ; minimum planning time in seconds (not very important)
num_bins=20 ; velocity binning params

# The camera is assumed to be mounted on a robot at fixed 
# height and fixed pitch.
[camera_params]
modalities=['rgb'] ; camera modalities are either 'rgb' or 'disparity'
width=64 ; width of the camera image in pixels
height=64 ; height of the camera image in pixels
z_near=0.01 ; near plane clipping distance
z_far=20.0 ; far plane clipping distance
fov_horizontal=90.0
fov_vertical=90.0
img_channels=3
im_resize=1.0
max_depth_meters=10e7

[building_params]
building_name = Univ ; the name of the default map is Univ
# threshold for amount of building noise to keep, larger number 
# will yield less noise and precision, smaller number adds details
# that includes noise
building_thresh = 20